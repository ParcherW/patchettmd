GPT_Prompts.txt

create_random_atoms
We need a python function called create_random_atoms to address issue #4 in github. The function should create an arbitrarily specified number of atoms to be initialized. The best way to do this John can think of is to create a funtion that returns a list of Atoms that takes:
1. The number of atoms required in the list, defaults to 1.
2. A random number seed that defaults to 1
3. atom_type that defaults to 0
4. mass that defaults to 1.0
5. A six tuple representing xmin, xmax, ymin, ymax, zmin, zmax that represents a box thatthe position should fall within
6. The maximum absolute of velocity defaulting to 3

The Atom class consructor definition follows:
class Atom:
    def __init__(self, position, velocity, atom_type=0, mass=1.0):
The postion and velocity are both 3 vectors and can be represented as lists or tuples or numpy arrays as they will be cast to numpy arrays in the constructor.

Can you create this function? Pleae don't provide the Atom class or a main, just the funtion.


#############  MDInputReader.py
I am writing an input deck reader class for a molecular Dynamics simulation.
The class is called MDInputReader
the class constructor shall take a single string containing the file name to be parsed.
The class shall have a read method, that will be called by user to do the acutal read of the file, it will return the config data structure.
The class shall not have any imports
The class shall have a config data structure that is a nested dictionary. At the top level, each key is a section name (like "Simulation", "System", "Potential", or "Output"), and the corresponding value is another dictionary containing key–value pairs for that section's parameters. 

The input deck is assumed to be structured in sections like:
[SectionName]
key = value
comments start with a hash # and the rest of the line should be considered a comment. Comments frequently start after the value.
Lines starting with '#' are treated as comments.
There should be a set of defaults that guaranteed to be provided by this class, even if the user does not specify them in the input deck. These defaults are as follows:
[Simulation]
# General simulation parameters
time_step   = 0.00001       # in time units
n_steps     = 20000      # total number of simulation steps
ensemble    = NVE        # simulation ensemble

[System]
# System and geometry information
box_length  = 10.0   # simulation box length (assuming a cubic box)
n_particles = 20     # number of particles in the simulation
boundary = reflecting  # "periodic" or "reflecting"

[Potential]
# Force field parameters (example: Lennard-Jones potential)
potential_type = Lennard-Jones
epsilon        = 30.0
sigma          = 2.5
cutoff         = 2.5
"coulomb_k" = 9e9

[Output]
# Output options
output_frequency = 200   # write simulation data every 100 steps
output_file      = trajectory.xyz

each of these defaults should have an accessor function.
Additionally, if the key value is read in the Atoms section, the value will be a list of numbers that must be returned as a list of numbers rather than a string.

Input Deck Structure:
Specify that the input deck uses sections defined by square brackets (e.g., [SectionName]) and that key–value pairs follow the format key = value. Also note that comments start with a hash (#) and can appear as full-line comments or inline after a key–value pair.

Default Sections and Keys:
Clearly list the sections (e.g., [Simulation], [System], [Potential], [Output]) along with the default key–value pairs for each. This avoids ambiguity regarding what defaults must be preloaded.

Accessor Functions:
State that each default parameter should have its own accessor function (e.g., get_time_step(), get_box_length(), etc.) and specify the expected data type (float, int, or string) for each.

Special Handling for the Atoms Section:
Explicitly mention that in the [Atoms] section, if a key’s value is a whitespace-separated list of numbers, it must be parsed and returned as a list of numbers (with proper type conversion to int or float) rather than as a plain string.

Input Source Flexibility:
Mention whether the code should accept both file paths and raw string input, and describe the intended behavior when the input is not provided (i.e., only defaults should be available).

Parsing Specifics:
Include details on how to handle inline comments, quoted keys (e.g., "coulomb_k"), and whitespace trimming. This level of detail helps ensure that the code handles these edge cases consistently.


can you write this class?

